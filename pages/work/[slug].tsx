import React from 'react'
import Layout from '../../components/Layout'
import Head from 'next/head'
import PreloaderWrapper from '../../components/preloaders/PreloaderWrapper'
import { request } from '../../lib/datocms';
import WorkContainer from '../../components/Work_page_components/WorkContainer';
import DataInterface from '../../types/DataInterface';

export default function WorkElementPage({data}:{data:DataInterface}) {
  
  
  
  return (
    <div>
        <Head>
            <title>{data.allWorks[0].title} - GraphicHunters</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.svg" />
        </Head>
        <PreloaderWrapper>
          <Layout blackFooter={true} blackSide={true}>
              <WorkContainer data={data.allWorks[0]}/>
          </Layout>
        </PreloaderWrapper>        
    </div>
  )
}


export async function getStaticProps({params}:{params:any}) {
  
  const INDIVIDUAL_QUERY = `{
    allWorks(
      filter:{
        slug:{eq:"${params.slug}"}
      }
      orderBy:[createdAt_DESC]
    ){
      id
      title
      desc
      slug
      laoder {hex}
      image {url height width}
      heroTitle
      intro
      services
      credits
      heroImage{url}
    	heroLogo{url}
      parallaxGrid{url height width}
      template
      parallaxGrid{url height width}
      parallaxSection{url}
      bigImage{url}
      imagesGallery{url height width}    
      moreWork{
        id
        title
        desc
        slug
        laoder {hex}
        image {url}
      }
    }
  }`;

  const data = await request({
    query: INDIVIDUAL_QUERY,  
    variables: { limit: 10 }
  });
  return {
    props: { data }
  };
}


export async function getStaticPaths() 
{
    const GLOBAL_QUERY = `{
      allWorks {
        slug
      }
    }`;
  
    let data = await request({
      query: GLOBAL_QUERY,
      variables: { limit: 10 }
    });
    

    data = await data.allWorks.map((item:any)=>(
      {
          params:{
              slug:item.slug,
          }
      }
      ))
    
     return {
      paths:data,
      fallback: false,
    };
}